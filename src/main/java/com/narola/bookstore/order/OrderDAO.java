package com.narola.bookstore.order;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.narola.bookstore.book.model.Book;
import com.narola.bookstore.cart.Cart;
import com.narola.bookstore.utility.DBConnect;

public class OrderDAO {

	public static void insertQry(Order order) {
		int autogenerated = 0;
		Connection con = null;
		ResultSet rs = null, rs1 = null, rs2 = null;
		PreparedStatement ps = null, ps1 = null, ps2 = null, ps3 = null, ps4 = null;
		String INSERTADDRESS = "insert into mydb.address(address_Line1,address_Line2,landmark,state,pincode,city,address_type,mobileNo) values(?,?,?,?,?,?,?,?)";

		try {
			con = DBConnect.getInstance().getConnection();
			con.setAutoCommit(false);

			ps = con.prepareStatement(INSERTADDRESS, ps.RETURN_GENERATED_KEYS);
			ps.setString(1, order.getAddress().getAddressLine1());
			ps.setString(2, order.getAddress().getAddressLine2());
			ps.setString(3, order.getAddress().getLandmark());
			ps.setString(4, order.getAddress().getState());
			ps.setInt(5, order.getAddress().getPincode());
			ps.setString(6, order.getAddress().getCity());
			ps.setString(7, order.getAddress().getAddressType());
			ps.setLong(8, order.getAddress().getMobile());
			ps.execute();

			rs = ps.getGeneratedKeys();
			if (rs.next()) {
				autogenerated = rs.getInt(1);
			}

			ps1 = con.prepareStatement("insert into mydb.order(userId,addressID,totalAmount) values(?,?,?)",
					ps1.RETURN_GENERATED_KEYS);
			ps1.setInt(1, order.getUser().getUserId());
			ps1.setInt(2, autogenerated);
			ps1.setDouble(3, order.getTotalAmount());
			ps1.execute();

			rs1 = ps1.getGeneratedKeys();
			if (rs1.next()) {
				autogenerated = rs1.getInt(1);
			}

			ps2 = con.prepareStatement("select bookId,quantity,amount from mydb.cart where userId=?");
			ps2.setInt(1, order.getUser().getUserId());
			rs2 = ps2.executeQuery();

			Cart cart = null;
			if (rs2.next()) {
				int bookId = rs2.getInt(1);
				Book book = new Book();
				book.setBookId(bookId);
				int qty = rs2.getInt(2);
				double amount = rs2.getDouble(3);
				cart = new Cart(book, qty, amount);
			}

			ps2 = con.prepareStatement("insert into order_item(orderId,bookId,quantity,amount) values(?,?,?,?)",
					ps2.RETURN_GENERATED_KEYS);
			ps2.setInt(1, autogenerated);
			ps2.setInt(2, cart.getBook().getBookId());
			ps2.setInt(3, cart.getQuantity());
			ps2.setDouble(4, cart.getAmount());
			ps2.execute();

			ps3 = con.prepareStatement("insert into transaction(userId,orderId,amount,status) values(?,?,?,?);");
			ps3.setInt(1, order.getUser().getUserId());
			ps3.setInt(2, autogenerated);
			ps3.setDouble(3, order.getTotalAmount());
			ps3.setString(4, "successful");
			ps3.execute();

			ps4 = con.prepareStatement("delete from cart where userId=?");
			ps4.setInt(1, order.getUser().getUserId());
			ps4.executeUpdate();

			con.commit();

		} catch (Exception e) {
			if (con != null) {
				try {
					con.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}

		}
	}

}
